import subprocess


def main(query: str):
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
import polars as pl
import phiOp as po
import op2python as o2p
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    tuples = cur.fetchall()
    cur.close()
    conn.close()
    
    df = pl.DataFrame(tuples, {{'cust': pl.String, 'prod': pl.String, 'day': pl.Int32, 
                              'month': pl.Int32, 'year': pl.Int32, 'state': pl.String, 'quant': pl.Int32, 'date': pl.Date}})
    
    
    # THIS IS WHERE THE GENERATED CODE GOES!
    phi = po.parse_query('''{query}''')
    
    opInstance = o2p.op2python(phi)
    
    body = opInstance.construct_queries(df)
    
    return body

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    query = 'select prod, cust, state, sum(quant), sum(x.quant), sum(y.quant)\nfrom sales\ngroup by prod, cust: x, y\nsuchthat x.state = "NY" and x.quant > 15, y.state = "NJ"'
    main(query)
